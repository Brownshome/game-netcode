#set ( $schema = $packet.schema() )
package ${packet.packageName()};

import java.nio.ByteBuffer;
import java.util.List;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;

import brownshome.netcode.Connection;
import brownshome.netcode.NetworkException;
import brownshome.netcode.NetworkUtils;
import brownshome.netcode.Packet;
import brownshome.netcode.sizing.NetworkObjectSize;

public final class ${packet.name()}Packet extends Packet {
	Logger LOGGER = Logger.getLogger("brownshome.netcode");

#foreach ( $parameter in $packet.parameters() )
#set( $converter = $parameter.converter() )
	public final $parameter.type() ${parameter.dataName()};
#if( $converter.type() )
	private final $converter.type() ${parameter.converterName()};
#end
#end

	private final NetworkObjectSize size;
	
	public ${packet.name()}Packet(#foreach( $parameter in $packet.parameters() )$parameter.type() ${parameter.dataName()}#if( ! $foreach.last ), #{end}#{end}) {
		super(${schema.shortName()}Schema.FULL_NAME, "${packet.handledBy()}", ${packet.id()}, 
				new int[] { #foreach( $id in $packet.calculatedOrderingIDs($schema) )${id}#if( ! $foreach.last ), #{end}#{end} });

#foreach ( $parameter in $packet.parameters() )
#set( $converter = $parameter.converter() )
		this.${parameter.dataName()} = ${parameter.dataName()};
#if( $converter.type() )
		this.${parameter.converterName()} = ${converter.construct()};
#end
#end

#foreach ( $parameter in $packet.parameters() )
#set( $converter = $parameter.converter() )
		NetworkObjectSize ${parameter.sizeName()} = ${converter.size( $parameter )};
#end
		
		size = NetworkObjectSize.combine(#foreach( $parameter in $packet.parameters() )${parameter.sizeName()}#if( ! $foreach.last ), #{end}#{end});
	}

	protected ${packet.name()}Packet(ByteBuffer buffer) {
		this(#foreach( $parameter in $packet.parameters() )#set( $converter = $parameter.converter() )${converter.read( $parameter, "buffer" )}#if( ! $foreach.last ), #{end}#{end});
	}
	
	@Override
	public void write(ByteBuffer buffer) {
#foreach( $parameter in $packet.parameters() )
#set( $converter = $parameter.converter() )
		${converter.write( $parameter, "buffer" )};
#end
	}

	@Override
	public int size() {
		return size.size();
	}

	@Override
	public boolean isSizeExact() {
		return size.isExact();
	}
	
	@Override
	public boolean isSizeConstant() {
		return size.isConstant();
	}
	
	@Override
	public void handle(Connection<?> connection, int minorVersion) throws NetworkException {
		try {
			${packet.executionExpression()};
		} catch(Throwable t) {
			LOGGER.log(Level.SEVERE, "Error processing ${packet.name()}", t);
			throw new NetworkException(t, connection);
		}
	}

#if ( $packet.isReliable() )
	@Override
	public boolean reliable() {
		return true;
	}
#end

	@Override
	public int priority() {
		return $packet.priority();
	}

	@Override
	public String toString() {
		Object[] items = new Object[] { #foreach( $parameter in $packet.parameters() )${parameter.dataName()}#if( ! $foreach.last ), #{end}#{end} };

		return String.format("${packet.name()}Packet %s", Arrays.deepToString(items));
	}
}
