package ${schema.packageName()};

import java.nio.ByteBuffer;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import brownshome.netcode.Packet;
import brownshome.netcode.Schema;

@Generated("brownshome.netcode.annotationprocessor.NetworkSchemaGenerator")
public final class ${schema.shortName()} extends Schema {
	/** The currently supported version. */
	public static final int MAJOR_VERSION = ${schema.majorVersion()}, MINOR_VERSION = ${schema.minorVersion()};
	
	/** The name of this schema */
	public static final String FULL_NAME = "${schema.longName()}", SHORT_NAME = "${schema.shortName()}";
	
	public ${schema.shortName()}() {
		this(MAJOR_VERSION, MINOR_VERSION);
	}

	public ${schema.shortName()}(int minorVersion) {
		this(MAJOR_VERSION, minorVersion);
	}

	public ${schema.shortName()}(int majorVersion, int minorVersion) {
		super(SHORT_NAME, FULL_NAME, majorVersion, minorVersion, createPacketList(minorVersion));
	}

	private static List<Function<ByteBuffer, Packet>> createPacketList(int minorVersion) {
		return List.of(#foreach( $packet in $schema.packetDefinitions() )${packet.name()}::new#if( ! $foreach.last ), #{end}#{end});
	}

	@Override
	public Schema withMinorVersion(int minorVersion) {
		return new ${schema.shortName()}(majorVersion(), minorVersion);
	}
}